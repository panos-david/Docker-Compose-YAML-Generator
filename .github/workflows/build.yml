name: Build and Test

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run basic test - list supported types
      run: |
        python main.py --list-supported
    
    - name: Create test project with Python files
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p test_project
        echo 'import flask' > test_project/app.py
        echo 'flask==3.0.0' > test_project/requirements.txt
        
    - name: Test generation on sample project
      if: matrix.os == 'ubuntu-latest'
      run: |
        python main.py test_project
        cat docker-compose.generated.yml
        
  build-pyinstaller:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build with PyInstaller
      run: |
        pyinstaller -F main.py
    
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: docker-compose-generator-${{ matrix.os }}
        path: |
          dist/main
          dist/main.exe
